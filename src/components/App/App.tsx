import { useState, useEffect } from 'react';
import {
  useQuery,
  keepPreviousData,
} from '@tanstack/react-query';
import NoteList from '../NoteList/NoteList';
import SearchBox from '../SearchBox/SearchBox';
import css from './App.module.css';

import { fetchNotes } from '../../services/noteService';

import { useDebounce } from 'use-debounce';
import type { GetNoteResponse } from '../../services/noteService';
import Pagination from '../Pagination/Pagination';
import Modal from '../Modal/Modal';
import NoteForm from '../NoteForm/NoteForm';
import Loader from '../Loader/Loader';
import ErrorMessage from '../ErrorMessage/ErrorMessage';

export default function App() {
  const [searchQuery, setSearchQuery] = useState('');
  const [debouncedQuery] = useDebounce(searchQuery, 300);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [currentPage, setCurrentPage] = useState(1); // üîπ –ü–æ—á–∏–Ω–∞—î–º–æ –∑ 1, –Ω–µ –∑ 0
  const perPage = 12;

  

  useEffect(() => {
    setCurrentPage(1); // üîπ –ü—Ä–∏ –Ω–æ–≤–æ–º—É –ø–æ—à—É–∫—É –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –Ω–∞ 1 —Å—Ç–æ—Ä—ñ–Ω–∫—É
  }, [debouncedQuery]);

  const { data, isLoading, error } = useQuery<GetNoteResponse>({
    queryKey: ['notes', debouncedQuery, currentPage],
    queryFn: () => fetchNotes(debouncedQuery, currentPage, perPage), // üîπ –ë–µ–∑ +1
    placeholderData: keepPreviousData,
  });



  return (
    <div className={css.app}>
      <header className={css.toolbar}>
        <SearchBox value={searchQuery} onChange={setSearchQuery} />

        {data && data.totalPages > 1 && (
          <Pagination
            pageCount={data.totalPages}
            currentPage={currentPage - 1} // üîπ –Ø–∫—â–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç Pagination 0-based
            onPageChange={({ selected }) => setCurrentPage(selected + 1)} // üîπ –£–∑–≥–æ–¥–∂—É—î–º–æ
          />
        )}

        <button className={css.button} onClick={() => setIsModalOpen(true)}>
          Create note +
        </button>
      </header>

      {isLoading && <Loader />}
      {error && <ErrorMessage />}

      {data && <NoteList notes={data.notes} />}


      {isModalOpen && (
        <Modal onClose={() => setIsModalOpen(false)}>
          <NoteForm
            onCancel={() => setIsModalOpen(false)}
            onSuccess={() => setCurrentPage(1)} // üîπ –ü—ñ—Å–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –Ω–∞ 1 —Å—Ç–æ—Ä—ñ–Ω–∫—É
          />
        </Modal>
      )}
    </div>
  );
}
